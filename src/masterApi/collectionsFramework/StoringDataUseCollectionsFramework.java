package masterApi.collectionsFramework;

/**
 * 컬렉션 프레임워크를 사용하여 데이터 저장
 *
 */
public class StoringDataUseCollectionsFramework {

	/*
	 * ● 컬렉션 프레임워크 소개
	 * Collections Framework는 JDK에서 가장 널리 사용되는 API입니다. 
	 * 작업 중인 응용 프로그램이 무엇이든 간에 어느 시점에서 데이터를 메모리에 저장하고 처리해야 할 가능성이 있습니다.
	 * 데이터 구조의 역사는 거의 컴퓨팅 자체로 거슬러 올라갑니다. 
	 * Collections Framework는 Java가 발명되기 훨씬 전에 개발된 메모리에 데이터를 저장, 구성 및 액세스하는 방법에 대한 개념을 구현한 것입니다. 
	 * Collections Framework는 앞으로 보게 될 매우 효율적인 방식으로 이 작업을 수행합니다.
	 * Collections Framework는 1998년 Java SE 2에서 처음 도입되었으며 그 이후로 두 번 다시 작성되었습니다.
	 * -제네릭이 추가되었을 때 Java SE 5에서;
	 * -인터페이스의 기본 메소드와 함께 람다 표현식이 도입되었을 때 Java 8에서.
	 * 이 두 가지는 지금까지 만들어진 Collections Framework의 가장 중요한 업데이트입니다. 
	 * 그러나 사실 거의 모든 JDK 버전에는 Collections Framework에 대한 일련의 변경 사항이 있습니다.
	 * 이 부분에서는 애플리케이션에서 이 데이터를 조작하는 데 사용할 패턴과 함께 Collections Framework가 제공해야 하는 가장 유용한 
	 * 데이터 구조를 배우게 됩니다.
	 * 가장 먼저 알아야 할 것은 기술적인 관점에서 Collections Framework는 다양한 유형의 컨테이너에 데이터를 저장하는 다양한 방법을 
	 * 모델링하는 인터페이스 집합이라는 것입니다. 그런 다음 프레임워크는 각 인터페이스에 대해 하나 이상의 구현을 제공합니다. 
	 * 이러한 구현을 아는 것은 인터페이스만큼 중요하며 올바른 구현을 선택하는 것은 인터페이스로 수행해야 하는 작업에 따라 다릅니다.
	 * 
	 * ● 컬렉션 프레임워크에서 길 찾기
	 * Collection Framework의 인터페이스와 클래스의 양은 처음에는 압도적일 수 있습니다. 
	 * 실제로 클래스와 인터페이스 모두에서 사용할 수 있는 구조가 많이 있습니다. 일부는 , 와 같이 자명한 이름을 LinkedList가지고 있습니다. 
	 * 일부는 , 와 같이 ConcurrentHashMap일부는 이상하게 들릴 수 있습니다 ConcurrentSkipListMap.
	 * 이러한 요소 중 일부는 다른 요소보다 훨씬 더 자주 사용할 것입니다. 
	 * ListJava 언어 에 이미 익숙하다면 아마도 이미 ArrayList보았을 것 Map입니다. 
	 * 이 튜토리얼은 가장 널리 사용되는 Collections Framework 구조, Java 개발자로서 매일 사용할 구조, 
	 * 그리고 가장 잘 알고 이해해야 하는 구조에 중점을 둡니다. 즉, 컬렉션 프레임워크에 무엇이 있는지에 대한 큰 그림이 필요합니다.
	 * 첫째, 프레임워크는 인터페이스와 구현으로 구성됩니다. 
	 * 올바른 인터페이스를 선택한다는 것은 애플리케이션에 어떤 기능을 제공하고 싶은지 알아야 한다는 것을 의미합니다. 필요한 것은 다음으로 구성됩니다.
	 * -객체를 저장하고 반복합니까?
	 * -개체를 대기열로 밀어넣고 팝핑하시겠습니까?
	 * -키를 사용하여 검색하시겠습니까?
	 * -인덱스로 액세스?
	 * -그들을 정렬?
	 * -중복 또는 null 값의 존재를 방지합니까?
	 * 
	 */
}
