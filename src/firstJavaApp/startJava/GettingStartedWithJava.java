package firstJavaApp.startJava;

/**
 * Create your first Java application.
 * @author kbs
 *
 */
public class GettingStartedWithJava {

	/*
	 * 1.자바 애플리케이션의 요소
	 * 다른 프로그래밍 언어에 익숙하더라도 컴파일에 대해 알고 실행 파일이 무엇인지 알고 Java는 C또는 C++와 다른 방식으로 작동하기 때문에 다음에 관심이 있을 수 있습니다.
	 * 
	 * 2.자바 코드 컴파일 및 실행
	 * Java애플리케이션을 작성하기 위해 따라야 하는 몇 가지 단계가 있습니다. 이 튜토리얼은 매우 간단한 Java애플리케이션을 작성하는 방법을 보여줍니다. 
	 * 엔터프라이즈 애플리케이션을 생성해야 하는 경우 생성 프로세스가 더 복잡하지만 핵심에는 다음과 같은 간단한 단계가 있습니다.
	 * 이 단계의 첫 번째 단계는 텍스트 편집기에서 일부 Java 코드를 작성하는 것입니다.
	 * 그런 다음 이 코드는 컴퓨터에서 실행할 수 있는 다른 형식으로 변환되어야 합니다. 이 변환은 컴파일러 라고 하는 특별한 소프트웨어에 의해 수행됩니다 . 
	 * 일부 언어에는 컴파일러가 없습니다. 자바는 한다. 모든 컴파일러는 언어에 따라 다릅니다.
	 * 컴파일러에 의해 생성된 파일은 종종 바이너리 파일 또는 실행 파일이라고 합니다. 소스 코드를 읽고 이해할 수 있는 반면 바이너리 또는 실행 파일은 사람이 읽을 수 없습니다. 
	 * 당신의 컴퓨터만이 그것을 이해할 수 있습니다.
	 * 이 코드에는 바이트 코드 라고 하는 특수 이진 코드가 포함되어 있습니다 . 이것은 당신이 접할 수있는 기술 용어입니다. 이 바이트 코드 가 무엇인지에 대한 정확한 설명은 이 튜토리얼의 범위를 벗어납니다.
	 * 일부 코드 컴파일이 실패할 수 있습니다. 컴파일러가 실행 가능한 버전을 생성하려면 코드가 정확해야 합니다. 걱정하지 마십시오. 이 페이지는 컴파일할 코드를 제공합니다. 
	 * 복사하여 텍스트 편집기에 붙여넣기만 하면 됩니다.
	 * 컴파일러가 필요한 바이너리 파일을 생성하면 이 바이너리 파일을 실행할 수 있습니다. 그러면 프로그램이 됩니다.
	 * 
	 * 이 두 단계: 컴파일 및 실행에는 JDK라고도 하는 Java Development Kit의 일부인 두 가지 특정 소프트웨어가 필요합니다. 
	 * JDK를 무료로 다운로드하는 방법과 이 자습서의 뒷부분에서 설치하는 방법을 볼 수 있습니다.
	 * 
	 * Java SE 11부터는 .java파일을 직접 실행하여 이 두 단계를 하나로 병합할 수도 있습니다. 이러한 기능은 단일 파일에 작성된 프로그램을 실행하는 경우에만 사용할 수 있습니다. 
	 * Java 코드가 둘 이상의 파일에 걸쳐 있는 경우 Java 애플리케이션을 실행하는 이 방법은 작동하지 않습니다.
	 * 
	 * 3.첫 번째 자바 클래스 생성
	 * 알아야 할 첫 번째 단계는 작성 중인 Java 코드가 일반 텍스트 파일에 저장된다는 것입니다. 이 튜토리얼에서 애플리케이션은 단일 텍스트 파일로 작성됩니다. 
	 * 더 큰 응용 프로그램에는 수천 개의 이러한 파일이 필요할 수 있습니다.
	 * Java는 객체 지향 언어입니다. 이 기술 용어가 아무 의미가 없더라도 걱정하지 마십시오. 이 시점에서 기억해야 할 것은 작성하는 모든 코드가 Java 클래스에 있어야 한다는 것입니다.
	 * Java 클래스는 텍스트 파일의 특수 선언에 의해 생성됩니다. 다음 코드를 복사하여 텍스트 편집기에 붙여넣기만 하면 됩니다. 축하합니다! 첫 번째 Java 클래스를 만들었습니다!
	 * 
	 * public class MyFirstClass {
     * 
     * }
     * 
     * 이 Java 클래스의 이름은 입니다 MyFirstClass. 이 텍스트를 라는 파일에 저장해야 합니다 MyFirstClass.java. Java 클래스는 확장자를 가진 클래스와 이름이 같은 파일에 저장해야 합니다 .java. 
     * 이것은 필수이며 실제로 어떤 클래스가 작성되었는지 알기 위해 파일을 열 필요가 없기 때문에 매우 편리합니다.
     * 숫자로 시작하지 않는 한 이 클래스에 이름을 지정할 수 있습니다. 하지만 규칙이 있습니다. Java 클래스의 이름은 대문자로 시작합니다. 이것은 필수 사항은 아니지만 모든 Java 개발자가 이 규칙을 따릅니다. 
     * 노련한 Java 개발자가 되면 이 규칙을 따르지 않는 클래스를 보는 것이 이상하게 보일 것입니다.
     * 이 예제를 문자 그대로 따르고 있다면 MyFirstClass클래스를 라는 텍스트 파일에 저장해야 합니다 MyFirstClass.java.
     * 경고: 이 파일을 만들고 저장하려면 일반 텍스트 편집기를 사용해야 합니다. 워드 프로세서를 사용하면 작동하지 않습니다.
     * 
     * 4.퍼스트 클래스 편집 준비하기
     * 컴파일은 첫 번째 클래스를 만든 후 따라야 하는 두 번째 단계입니다. 파일에 작성한 Java 코드를 MyFirstClass.java실행할 수 있는 다른 형식으로 변환하는 것으로 구성됩니다. 
     * 이 변환의 결과는 컴파일러에서 만든 다른 파일에 저장됩니다. 이 파일의 이름은 MyFirstClass.class. 지금까지 사용한 유일한 도구는 일반 텍스트 편집기입니다. 이 클래스를 컴파일하려면 컴파일러가 필요합니다. 
     * 컴퓨터에 없는 것. 다행히도 이 컴파일러를 다운로드하여 무료로 사용할 수 있습니다. 이 과정을 안내해 드리겠습니다. 
     * 현재 "Java"를 다운로드한다는 것은 JDK라고도 하는 Java Development Kit를 다운로드하는 것을 의미합니다. 
     * JDK에는 많은 도구가 포함되어 있으며 그 중 Java 응용 프로그램을 컴파일하고 실행하는 데 사용할 도구가 있습니다. OpenJDK 프로젝트와 Oracle에서 공식적으로 배포합니다. 
     * "Java"라고도 하는 다른 요소에 대해 들어본 적이 있을 것입니다. JRE는 Java Runtime Environment의 약자입니다. OpenJDK 또는 Oracle에서 더 이상 배포하지 않는 JDK의 하위 집합입니다. 
     * 여기에는 Java 애플리케이션을 실행하는 데 필요한 도구만 포함되어 있습니다. JRE에서 제공하는 도구로 코드를 컴파일할 수 없습니다. J2EE, Java EE 또는 Jakarta EE에 대해서도 들어보셨을 것입니다. 
     * 이 모든 약어는 Java Enterprise Edition을 나타냅니다. 엔터프라이즈급 응용 프로그램을 만들기 위한 도구 및 라이브러리 집합입니다. Java EE는 JDK와 다르며 이 자습서의 범위를 벗어납니다. 
     * 이 튜토리얼에서 생성하는 간단한 애플리케이션을 컴파일하고 실행하기 위해 Java EE가 필요하지 않습니다.
     * 
     * 5.Java 개발 키트 설정
     * 다른 위치에서 JDK를 다운로드할 수 있습니다. 항상 최신 버전의 JDK를 참조하는 원스톱 페이지가 있습니다: https://jdk.java.net/ . 최신 "사용 준비" 
     * JDK 버전을 선택하면 필요한 JDK 버전을 다운로드할 수 있는 페이지로 이동합니다. 이 페이지에서 네 가지 버전을 다운로드할 수 있습니다.
     *  
     * 리눅스/AArch64
     * 리눅스/x64
     * 맥OS/x64
     * 윈도우/x64
     * 
     * 이 페이지는 클래스 경로 예외가 있는 GNU 일반 공중 사용 허가서 버전 2에 따른 Java SE 플랫폼의 구현인 Java Development Kit의 프로덕션 준비 오픈 소스 빌드를 제공합니다. 
     * 
     * Windows/x64용 JDK 설정
     * 윈도우 버전을 다운로드하자. 얻을 수 있는 것은 ZIP 유틸리티 소프트웨어로 열 수 있는 약 200MB의 ZIP 파일입니다. 이 ZIP 파일에는 JDK가 포함되어 있습니다. 
     * 컴퓨터 어디에서나 이 파일의 내용을 압축 해제할 수 있습니다. JAVA_HOME이 작업이 완료되면 JDK의 압축을 푼 디렉토리를 가리키는 라는 환경 변수를 만들어야 합니다 . 
     * 먼저 DOS 프롬프트를 열어야 합니다. 디렉토리에서 JDK 16 ZIP 파일의 압축을 푼 경우 D:\jdk\이 DOS 프롬프트에 입력해야 하는 명령은 다음과 같습니다.
     * 
     * > set JAVA_HOME=D:\jdk\jdk-16
     * 
     * 이 예와 다른 모든 예에서 행간 >은 이 명령을 입력하거나 프롬프트에 붙여넣어야 함을 보여주기 위한 것입니다. set이 문자는 명령 의 일부가 아니므로 입력하거나 붙여넣으면 안 됩니다 .
     * JAVA_HOME다음 코드를 입력하여 변수가 올바르게 설정되었는지 확인할 수 있습니다 .
     * 
     * > echo %JAVA_HOME%
     * 
     * 이 명령은 다음을 인쇄해야 합니다.
     * 
     * D:\jdk\jdk-16
     * 
     * 그런 다음 JDK 디렉토리의 디렉토리 PATH를 추가하려면 환경 변수 를 업데이트해야 합니다. bin이것은 다음 명령으로 수행할 수 있습니다.
     * 
     * > set PATH=%JAVA_HOME%\bin;%PATH%
     * 
     * 세미콜론 누락에 공백을 추가하는 것과 같은 한 번의 실수로 실패하기 때문에 이 두 변수를 설정할 때는 매우 주의해야 합니다. 이 명령 프롬프트를 닫지 마십시오. 
     * 닫았다가 다시 열면 이 두 변수를 다시 만들어야 합니다.
     * 
     * Linux/x64용 JDK 설정
     * 리눅스 버전을 다운로드하자. .tar.gz확장해야 하는 확장자가 있는 아카이브 파일이 제공됩니다. 확장하려면 복사하거나 올바른 디렉토리로 이동해야 합니다. 그런 다음 다음 명령을 입력할 수 있습니다.
     * 
     * $ tar xzf *.tar.gz
     * 
     * 이 예와 다른 모든 예에서 행간 $은 이 명령을 입력하거나 프롬프트에 붙여넣어야 함을 보여주기 위한 것입니다. tar이 문자는 명령 의 일부가 아니므로 입력하거나 붙여넣으면 안 됩니다.
     * .tar.gz이 명령 은 현재 디렉토리에 있는 확장자를 가진 모든 파일을 확장 합니다. 확장해야 하는 경우 이 파일의 정확한 이름을 사용할 수 있습니다.
     * 이 명령을 실행하는 데는 시스템에 따라 몇 초 이상이 소요될 수 있습니다. 현재 디렉토리에 JDK의 내용이 있는 새 디렉토리를 생성합니다.
     * JAVA_HOME이 작업이 완료되면 JDK를 확장한 디렉터리를 가리키는 라는 환경 변수를 만들어야 합니다 . 
     * 디렉토리 에서 JDK 16 아카이브 파일을 확장한 경우 /home/javauser/jdk이 쉘 프롬프트에 입력해야 하는 명령은 다음과 같습니다.
     * 
     * $ export JAVA_HOME=/home/javauser/jdk/jdk-16
     * 
     * 정확한 디렉토리는 확장한 배포 파일에 따라 다릅니다. JAVA_HOME다음 코드를 입력하여 변수가 올바르게 설정되었는지 확인할 수 있습니다 .
     * 
     * $ echo $JAVA_HOME
     * 
     * 이 명령은 다음을 인쇄해야 합니다.
     * 
     * /home/javauser/jdk/jdk-16
     * 
     * PATH그런 다음 변수 를 업데이트하여 binJDK 디렉토리의 디렉토리를 추가해야 합니다. 이것은 다음 명령으로 수행할 수 있습니다.
     * 
     * $ export PATH=$JAVA_HOME/bin:$PATH
     * 
     * 누락된 세미콜론의 공백 추가와 같은 한 번의 실수로 실패하기 때문에 이 두 변수를 설정할 때 매우 주의해야 합니다.
     * 이 쉘 프롬프트를 닫지 마십시오. 닫았다가 다시 열면 이 두 변수를 다시 만들어야 합니다. 다음 명령을 입력하여 모든 것이 정상인지 확인할 수 있습니다.
     * 
     * $ which java
     * 
     * 쉘은 방금 확장한 배포 디렉토리의 java실행 파일에 대한 전체 경로를 인쇄해야 합니다. bin이 예에서는 다음을 인쇄합니다.
     * 
     * /home/javauser/jdk/jdk-16/bin/java
     * 
     * 6.첫번째 클래스 컴파일
     * JDK를 올바르게 설정했으면; JAVA_HOME변수와 변수 가 PATH있으면 첫 번째 클래스를 컴파일할 준비가 된 것입니다. 
     * 지금 입력할 모든 명령은 이 두 변수를 설정하는 데 사용한 것과 동일한 프롬프트에 입력해야 합니다.
     * 첫 번째 Java 프로그램 컴파일 및 실행 Windows, Linux 또는 macOS 경로를 따랐든 나머지는 동일합니다.
     * - 첫 번째 수업을 저장한 디렉토리로 변경합니다 MyFirstClass.java. 를 입력하여 올바른 디렉토리에 있는지 확인할 수 있습니다 dir. 
     *   이 디렉토리에 있는 파일이 표시됩니다. 파일 이 표시되어야 MyFirstClass.java합니다. 
     * - 다음을 입력하여 이 디렉토리에서 컴파일러에 액세스할 수 있는지 확인하십시오. 이 명령은 Windows 또는 Linux에서 동일합니다.
     * 
     * > java -version
     * 
     * javac현재 사용 중인 버전을 알려줘야 합니다 . 오류 메시지가 표시되면 및 변수에 문제가 있을 수 있으므로 JAVA_HOME및 변수를 확인해야 합니다.PATH
     * - 이제 첫 번째 코드를 컴파일할 준비가 모두 되었습니다. 다음을 입력할 수 있습니다.
     * 
     * > javac MyFirstClass.java
     * 
     * 이 시점에서 두 가지 일이 발생할 수 있습니다. Java 코드의 오류로 인해 컴파일러에서 코드를 컴파일할 수 없다는 오류 메시지가 표시될 수 있습니다. 
     * 계속 진행하려면 먼저 수정해야 합니다. 컴파일러가 침묵을 지키고 아무 것도 불평하지 않는다면 축하합니다! 이는 Java 코드가 제대로 컴파일되었음을 의미합니다. 
     * 디렉토리의 내용을 다시 확인하면 그 안에 새 파일이 표시되어야 합니다.MyFirstClass.class
     * 
     * 7.클래스에 코드를 추가하여 실행
     * 지금까지 수업이 비어 있습니다. 실행 가능한 코드가 없습니다. 제대로 컴파일할 수 있었다면 다음 단계로 진행하여 일부 코드를 실행할 수 있습니다.
     * 파일을 열고 MyFirstClass.java다음 코드를 복사하기만 하면 됩니다.
     * 
     * public class MyFirstClass {
     *    public static void main(String... args) {
     *   	System.out.println("Hello, World!");
     *    }
     * }
     * 
     * 아시다시피 컴퓨터 과학에는 "Hello, World!"를 인쇄하는 프로그램을 작성하는 오랜 전통이 있습니다. 응용 프로그램의 콘솔에서. 그러니 그렇게 하자!
     * 이 클래스에는 명확하지 않은 기술 코드가 있습니다. 걱정 하지마; 이전 섹션에서 설명한 단계에 따라 컴파일하기만 하면 됩니다.
     * 컴파일러가 당신을 위해 생성했는지 확인하십시오 MyFirstClass.class. 실행하려면 다음 명령만 입력하면 됩니다.
     * 
     * > java MyFirstClass 
     * 
     * Hello, World! 가 인쇄되어야 합니다 . 콘솔에. 이 경우: 축하합니다! 첫 번째 Java 프로그램을 실행할 수 있었습니다!
     * 
     * 8.Hello World 프로그램을 단일 파일 응용 프로그램으로 실행
     * 자바 SE 11부터는 프로그램이 하나의 파일로 작성된다면 컴파일 단계를 거치지 않고 자바 애플리케이션을 실행할 수 있다. 이것은 이 간단한 Hello, World의 경우입니다! 애플리케이션.
     * 다음을 입력하면 됩니다.
     * 
     * > java MyFirstClass.java
     * 
     * 그러면 Hello, World! 가 인쇄됩니다. 콘솔에 메시지가 표시됩니다.
     * 
     * 9.더 나아가
     * 이 첫 번째 Java 프로그램은 모든 Java 개발자가 응용 프로그램을 실행하기 위해 따라야 하는 기본 단계를 보여주었습니다.
     * - .java텍스트 파일 세트에서 소스 생성
     * - 이 파일을 컴파일하여 해당 .class바이너리 파일 세트를 생성합니다.
     * - 응용 프로그램으로 함께 실행하십시오.
     * 대규모 애플리케이션에서 작업하는 개발자는 소스 코드를 관리하기 위해 일반 텍스트 편집기를 사용하지 않습니다. 그들은 통합 개발 환경을 사용합니다. 
     * IDE는 소프트웨어 개발에 특화된 복잡한 소프트웨어 응용 프로그램입니다. 
     * 이러한 응용 프로그램은 소스 코드의 컴파일을 자동으로 처리하며 무엇보다도 Java 코드 구문의 오류를 추적하고 실행의 버그를 수정하는 데 도움이 될 수 있습니다.
     * 이러한 도구 중 일부는 오픈 소스이며 무료로 사용할 수 있습니다.
     * - Eclipse 재단은 Eclipse를 유지 관리합니다: https://www.eclipse.org/
     * - Apache 재단은 NetBeans를 유지 관리합니다: https://netbeans.apache.org/
     * - JetBrains는 개인 및 상업적 개발에 무료로 사용할 수 있는 IntelliJ IDEA Community Edition을 게시합니다. https://www.jetbrains.com/idea/
     * 
     * 마지막 업데이트: 2021년 9월 14일
	 */
}
