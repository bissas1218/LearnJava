package getKnowLanguage.basics;

/**
 * 프로그램에서 기본 유형 변수 만들기
 * 객체가 필드에 상태를 저장한다는 것을 이미 배웠습니다. 
 * 그러나 Java 프로그래밍 언어에서도 변수 라는 용어를 사용합니다. 
 * 이 섹션에서는 이 관계와 변수 명명 규칙 및 규칙, 기본 데이터 유형(기본 유형, 문자열 및 배열), 기본값 및 리터럴에 대해 설명합니다.
 */
public class CreatePrimitiveTypeVariables {

	/*
	 * ● 기본 유형
	 * Java 프로그래밍 언어는 정적으로 유형이 지정되므로 모든 변수를 사용하려면 먼저 선언해야 합니다. 
	 * 여기에는 이미 본 것처럼 변수의 유형과 이름을 명시하는 것이 포함됩니다.
	 */
	
	int gear = 1;
	
	/*
	 * 이렇게 하면 이름이 지정된 필드 gear가 존재하고 숫자 데이터를 보유하며 초기 값이 1임을 프로그램에 알립니다. 
	 * 변수의 데이터 유형은 변수에 포함될 수 있는 값과 수행할 수 있는 작업을 결정합니다. 
	 * 에 추가하여 intJava 프로그래밍 언어는 7개의 다른 기본 데이터 유형을 지원합니다. 
	 * 기본 유형은 언어에 의해 사전 정의되고 예약된 키워드로 이름이 지정됩니다. 
	 * 기본 값은 다른 기본 값과 상태를 공유하지 않습니다. 
	 * Java 프로그래밍 언어에서 지원하는 8가지 기본 데이터 유형은 다음과 같습니다.
	 * 
	 * -byte: byte데이터 유형은 8비트 부호 있는 2의 보수 정수입니다. 
	 *        최소값은 -128이고 최대값은 127(포함)입니다. 
	 *        byte데이터 유형은 메모리 절약이 실제로 중요한 대규모 배열에서 메모리를 절약하는 데 유용할 수 있습니다 . 
	 *        int제한이 코드를 명확하게 하는 데 도움이 되는 위치 대신 사용할 수도 있습니다. 
	 *        변수의 범위가 제한되어 있다는 사실은 일종의 문서화 역할을 할 수 있습니다.
	 * -short: short데이터 유형은 16비트 부호 있는 2의 보수 정수입니다. 
	 *         최소값은 -32,768이고 최대값은 32,767(포함)입니다. byte와 마찬가지로 동일한 지침이 적용됩니다. 
	 *         메모리 절약이 실제로 중요한 상황에서 short를 사용하여 큰 배열의 메모리를 절약할 수 있습니다.
	 * -int: 기본적으로 int데이터 유형은 32비트 부호 있는 2의 보수 정수이며 최소값은 -2³¹ 이고 최대값은 2³¹ -1입니다. 
	 *       Java SE 8 이상에서는 int데이터 유형을 사용하여 최소값이 0이고 최대값이 2³² -1인 부호 없는 32비트 정수를 나타낼 수 있습니다. 
	 *       Integer클래스를 사용하여 데이터 int유형을 부호 없는 정수로 사용합니다. 
	 *       자세한 내용은 숫자 클래스 섹션 을 참조하세요. 
	 *       부호 없는 정수에 대한 산술 연산을 지원하기 위해 Integer와 같은 정적 메서드 compareUnsigned()가 클래스에 추가되었습니다.
	 * -long: long데이터 유형은 64비트 2의 보수 정수입니다. 부호 있는 long의 최소값은 -2 63 이고 최대값은 2 63 -1입니다. 
	 *        Java SE 8 이상에서는 long데이터 유형을 사용하여 최소값이 0이고 최대값이 2 64 -1인 부호 없는 64비트 길이를 나타낼 수 있습니다. 
	 *        int에서 제공하는 것보다 더 넓은 범위의 값이 필요한 경우 이 데이터 유형을 사용하십시오. 
	 *        이 클래스에는 unsigned long에 대한 산술 연산을 지원하는 등 의 Long메서드도 포함되어 있습니다 
	 *        .compareUnsigned()divideUnsigned()
	 * -float: float데이터 유형은 단정밀도 32비트 IEEE 754 부동 소수점입니다. 
	 *         값의 범위는 이 논의의 범위를 벗어나지만 Java 언어 사양 의 부동 소수점 유형, 형식 및 값 섹션에 지정 됩니다. 
	 *         및 에 대한 권장 사항과 마찬가지로 부동 소수점 숫자의 큰 배열에 메모리를 저장해야 하는 경우 
	 *         byte와 short, float(대신 double)를 사용하십시오. 
	 *         이 데이터 유형은 통화와 같은 정확한 값에 사용하면 안 됩니다. 
	 *         이를 위해서는 대신 java.math.BigDecimal 클래스 를 사용해야 합니다. 
	 *         숫자 및 문자열 커버 BigDecimal 및 Java 플랫폼에서 제공하는 기타 유용한 클래스.   
	 * -double: double데이터 유형은 배정밀도 64비트 IEEE 754 부동 소수점입니다. 
	 *          값의 범위는 이 논의의 범위를 벗어나지만 Java 언어 사양 의 부동 소수점 유형, 형식 및 값 섹션에 지정 됩니다. 
	 *          10진수 값의 경우 일반적으로 이 데이터 유형이 기본 선택입니다. 
	 *          위에서 언급했듯이 이 데이터 유형은 통화와 같은 정확한 값에 사용해서는 안 됩니다.
	 * -boolean: 데이터 유형에는 참/거짓의 boolean두 가지 값만 사용할 수 있습니다.  
	 *           true와 false조건을 추적하는 단순 플래그에 이 데이터 유형을 사용하십시오.
	 *           이 데이터 유형은 1비트의 정보를 나타내지만 "크기"는 정확하게 정의된 것이 아닙니다.
	 * -char: char데이터 유형은 단일 16비트 유니코드 문자입니다. 최소값은 \u0000(또는 0)이고 최대값은 \uffff(또는 65,535 포함)입니다.
	 * 
	 * 위에 나열된 8가지 기본 데이터 유형 외에도 Java 프로그래밍 언어는 java.lang.String클래스를 통해 문자열에 대한 특별 지원도 제공합니다. 
	 * 문자열을 큰따옴표로 묶으면 자동으로 새 String객체가 생성됩니다. 예를 들어:
	 */
	
	String s = "this is a string";
	
	/*
	 * String객체는 변경할 수 없습니다. 
	 * 즉, 한 번 생성되면 해당 값을 변경할 수 없습니다. 
	 * 클래스는 기술적으로 기본 데이터 유형 이 String아니지만 언어에서 제공하는 특별한 지원을 고려하면 아마도 그렇게 생각하는 경향이 있을 것입니다. 
	 * Strings섹션에서 String클래스에 대해 더 배울 것 입니다.
	 * 
	 * ● 기본값으로 변수 초기화
	 * 필드가 선언될 때 항상 값을 할당할 필요는 없습니다. 
	 * 선언되었지만 초기화되지 않은 필드는 컴파일러에 의해 합리적인 기본값으로 설정됩니다. 
	 * 일반적으로 이 기본값은 데이터 유형에 따라 0 또는 null입니다. 그러나 이러한 기본값에 의존하는 것은 일반적으로 나쁜 프로그래밍 스타일로 간주됩니다.
	 * 다음 표에는 위의 데이터 유형에 대한 기본값이 요약되어 있습니다.
	 * 
	 * Data Type				Default Value(for fields)
	 * byte						0
	 * short					0
	 * int						0
	 * long						0L
	 * float					0.0f
	 * double					0.0d
	 * char						/u0000
	 * String(or any object)	null
	 * boolean					false
	 * 
	 * 지역 변수는 약간 다릅니다. 컴파일러는 초기화되지 않은 지역 변수에 기본값을 할당하지 않습니다. 
	 * 선언된 지역 변수를 초기화할 수 없는 경우 사용하기 전에 값을 할당해야 합니다. 초기화되지 않은 지역 변수에 접근하면 컴파일 타임 오류가 발생합니다.
	 * 
	 * ● 리터럴로 값 만들기
	 * 기본 유형의 변수를 초기화할 때 new키워드가 사용되지 않는다는 것을 눈치채셨을 것입니다. 
	 * 기본 유형은 언어에 내장된 특수 데이터 유형입니다. 클래스에서 생성된 객체가 아닙니다. 리터럴은 고정 값의 소스 코드 표현입니다. 
	 * 리터럴은 계산 없이 코드에 직접 표시됩니다. 아래와 같이 기본 유형의 변수에 리터럴을 할당할 수 있습니다.
	 */
	
	boolean result = true;
	char capitalC = 'C';
	byte b = 100;
	short ss = 10000;
	int i = 100000;
	
	/*
	 * ● 정수 리터럴
	 * 정수 리터럴은 long문자 L또는 l; 그렇지 않으면 int 유형 입니다. L소문자 l는 숫자 1와 구분하기 어려우 므로 대문자 사용을 권장합니다.
	 * 정수 형식 byte, short, int및 long의 값은 리터럴 에서 만들 수 있습니다. 
	 * int범위를 초과하는 long 유형의 값은 long리터럴 에서 생성할 수 있습니다. 
	 * 정수 리터럴은 다음 숫자 체계로 표현할 수 있습니다.
	 * -10진수: 0부터 9까지의 숫자로 구성된 10진법; 이것은 당신이 매일 사용하는 숫자 체계입니다
	 * -16진법: 16진법으로, 숫자는 0에서 9까지의 숫자와 A에서 F까지의 문자로 구성됩니다.
	 * -Binary: Base 2, 숫자가 0과 1로 구성된 숫자(Java SE 7 이상에서 이진 리터럴을 생성할 수 있음)
	 * 
	 * 범용 프로그래밍의 경우 십진법은 여러분이 사용하게 될 유일한 숫자 체계일 것입니다. 
	 * 그러나 다른 숫자 체계를 사용해야 하는 경우 다음 예는 올바른 구문을 보여줍니다. 접두사 0x는 16진수를 나타내고 0b는 2진수를 나타냅니다.
	 */
	
	// The number 26, in decimal
	int decimalValue = 26;

	//  The number 26, in hexadecimal
	int hexadecimalValue = 0x1a;

	// The number 26, in binary
	int binaryValue = 0b11010;
	
	/*
	 * ● 부동 소수점 리터럴
	 * 부동 소수점 리터럴은 float문자 F또는 f; 그렇지 않으면 유형이 double이고 선택적으로 문자 D또는 d로 끝날 수 있습니다.
	 * 부동 소수점 유형( float 및 double )은 E 또는 e (과학 표기법의 경우) F 또는 f (32비트 부동 리터럴) 및 
	 * D 또는 d (64비트 이중 리터럴, 이것이 기본값이며 관례상 생략됨) 을 사용하여 표현할 수도 있습니다 .
	 */
	
	double d1 = 123.4;

	// same value as d1, but in scientific notation
	double d2 = 1.234e2;
	float f1  = 123.4f;
	
	/*
	 * ● 문자 및 문자열 리터럴
	 * char와 String 유형의 리터럴운 유니코드(UTF-16) 문자를 포함할 수 있습니다. 
	 * 편집기와 파일 시스템에서 허용하는 경우 이러한 문자를 코드에서 직접 사용할 수 있습니다. 
	 * 그렇지 않은 경우 "유니코드 이스케이프" \u0108(예: 서컴플렉스가 있는 대문자 C) 또는 
	 * "S\u00ED Se\u00F1or"(스페인어 Sí Señor)를 사용할 수 있습니다. 
	 * char리터럴 에는 항상 '작은 따옴표'를 사용하고 String리터럴에는 "큰 따옴표"를 사용합니다. 
	 * 유니코드 이스케이프 시퀀스는 char 또는 String리터럴 또는 리터럴 뿐만 아니라 프로그램의 다른 곳(예: 필드 이름)에서 사용할 수 있습니다.
	 * charJava 프로그래밍 언어는 및 String리터럴 에 대한 몇 가지 특수 이스케이프 시퀀스도 지원합니다 . \b(백스페이스), \t(탭), \n(줄 바꿈), \f(양식 피드), \r(캐리지 리턴), \"(큰따옴표), \'(작은따옴표) 및 \\( 백슬래시).
	 * 또한 null모든 참조 유형에 대한 값으로 사용할 수 있는 특수 리터럴이 있습니다. 리터럴 은 null기본 유형의 변수를 제외한 모든 변수에 할당될 수 있습니다. null존재 여부를 테스트하는 것 외에 가치 로 할 수 있는 일은 거의 없습니다 . 따라서 null프로그램에서 일부 개체를 사용할 수 없음을 나타내는 마커로 자주 사용됩니다.

마지막으로 클래스 리터럴 이라고 하는 특별한 종류의 리터럴도 있습니다 . 형 이름을 취하고 .class; 예를 들어, String.class. Class이것은 유형 자체를 나타내는 (유형의) 개체 를 나타냅니다.
	 */
}
