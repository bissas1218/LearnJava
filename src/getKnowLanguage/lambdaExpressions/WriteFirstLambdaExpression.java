package getKnowLanguage.lambdaExpressions;

/**
 * 첫 번째 람다 표현식 작성
 *
 */
public class WriteFirstLambdaExpression {

	/*
	 * 2014년에 Java SE 8은 람다 표현식의 개념을 도입했습니다. 
	 * Java SE 8이 출시되기 며칠 전을 기억한다면 익명 클래스 개념을 기억할 것입니다. 
	 * 그리고 람다 식이 어떤 정확한 경우에 익명 클래스의 인스턴스를 작성하는 또 다른 간단한 방법이라는 것을 들었을 것입니다.
	 * 그 당시를 기억하지 못한다면 익명 클래스에 대해 듣거나 읽었을 것이며 아마도 이 모호한 구문을 두려워할 것입니다.
	 * 음, 좋은 소식은 람다 식을 작성하는 방법을 이해하기 위해 익명의 클래스를 거칠 필요가 없다는 것입니다. 
	 * 게다가 많은 경우에 자바 언어에 람다가 추가되어 더 이상 익명 클래스가 필요하지 않습니다.
	 * 람다 식 작성은 다음 세 단계를 이해하는 것으로 나뉩니다.
	 * -작성하려는 람다 식의 유형 식별
	 * -구현에 적합한 방법 찾기
	 * -이 방법을 구현합니다.
	 * 정말 이게 전부입니다. 이 세 단계를 자세히 살펴보겠습니다.
	 * 
	 * ● 람다 식의 유형 식별
	 * 모든 것은 Java 언어의 유형을 가지며 이 유형은 컴파일 시간에 알려집니다. 
	 * 따라서 항상 람다 식의 유형을 찾을 수 있습니다. 변수의 유형, 필드의 유형, 메소드 매개변수의 유형 또는 메소드의 리턴 유형일 수 있습니다.
	 * 람다 식의 유형에는 제한이 있습니다. 즉, 기능적 인터페이스여야 합니다. 
	 * 따라서 기능적 인터페이스를 구현하지 않는 익명 클래스는 람다 식으로 작성할 수 없습니다.
	 * 기능적 인터페이스가 무엇인지에 대한 완전한 정의는 약간 복잡합니다. 이 시점에서 알아야 할 것은 기능 인터페이스가 추상 메서드가 하나만 있는 인터페이스라는 것뿐입니다.

Java SE 8부터 인터페이스에서 구체적인 메소드가 허용된다는 점에 유의해야 합니다. 인스턴스 메서드가 될 수 있으며 이 경우 기본 메서드 라고 하며 정적 메서드가 될 수 있습니다. 이러한 메서드는 추상 메서드 가 아니므로 계산되지 않습니다 .

@FunctionalInterface기능을 사용하려면 인터페이스에 주석을 추가해야 합니까?

아니요. 이 주석은 인터페이스가 실제로 작동하는지 확인하는 데 도움이 됩니다. 함수형 인터페이스가 아닌 유형에 이 주석을 넣으면 컴파일러에서 오류가 발생합니다.
	 */
}
