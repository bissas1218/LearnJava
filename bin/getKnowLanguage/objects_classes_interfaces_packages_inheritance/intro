개체(Objects), 클래스, 인터페이스, 패키지 및 상속

이전에 객체 지향 프로그래밍 언어를 사용한 적이 없다면 코드 작성을 시작하기 전에 몇 가지 기본 개념을 배워야 합니다. 
이 섹션에서는 개체, 클래스, 상속, 인터페이스 및 패키지를 소개합니다. 
각 토론은 이러한 개념이 실제 세계와 어떻게 관련되는지에 초점을 맞추면서 동시에 Java 프로그래밍 언어의 구문에 대한 소개를 제공합니다.

● 개체(Objects)란 무엇입니까?
객체는 관련 상태 및 동작의 소프트웨어 번들입니다. 
이 섹션에서는 객체 내에서 상태와 동작이 표현되는 방식을 설명하고 데이터 캡슐화의 개념을 소개하며 이러한 방식으로 소프트웨어를 설계할 때의 이점을 설명합니다.
객체는 두 가지 특성을 공유합니다. 모두 상태와 동작을 가집니다. 

개에는 상태(이름, 색, 품종, 배고픈)와 행동(짖는 것, 가져오기, 꼬리 흔드는 것)이 있습니다. 

자전거에는 상태(현재 기어, 현재 페달 케이던스, 현재 속도)와 동작(기어 변경, 페달 케이던스 변경, 브레이크 적용)도 있습니다. 

실제 객체의 상태와 동작을 식별하는 것은 객체 지향 프로그래밍의 관점에서 생각하기 시작하는 좋은 방법입니다.
지금 잠시 시간을 내어 가까운 지역에 있는 실제 물체를 관찰하십시오. 
보이는 각 물체에 대해 "이 물체가 어떤 상태에 있을 수 있습니까?"라는 두 가지 질문을 스스로에게 하십시오. 
"이 개체가 수행할 수 있는 가능한 동작은 무엇입니까?". 관찰 내용을 반드시 기록하십시오. 그렇게 하면 실제 개체의 복잡성이 다양하다는 것을 알 수 있습니다. 
데스크탑 램프에는 두 가지 가능한 상태(켜기 및 끄기)와 두 가지 가능한 동작(켜기, 끄기)만 있을 수 있지만 
데스크탑 라디오에는 추가 상태(켜기, 끄기, 현재 볼륨, 현재 스테이션) 및 동작(켜기)이 있을 수 있습니다. 
(끄기, 볼륨 높이기, 볼륨 줄이기, 탐색, 스캔 및 조정). 또한 일부 개체에는 다른 개체도 포함될 수 있습니다.

소프트웨어 개체는 상태 및 관련 동작으로 구성됩니다. 
개체는 상태를 필드 (일부 프로그래밍 언어의 변수)에 저장하고 메서드 (일부 프로그래밍 언어의 함수)를 통해 동작을 노출합니다. 
메서드는 개체의 내부 상태에서 작동하며 개체 간 통신의 기본 메커니즘 역할을 합니다. 
내부 상태를 숨기고 모든 상호 작용이 개체의 메서드를 통해 수행되도록 요구하는 것을 데이터 캡슐화 라고 합니다. 
이는 개체 지향 프로그래밍의 기본 원칙입니다. 예를 들어 자전거를 고려하십시오.

상태(현재 속도, 현재 페달 케이던스 및 현재 기어)를 지정하고 해당 상태를 변경하는 방법을 제공함으로써 
개체는 외부 세계에서 개체를 사용하는 방법을 제어할 수 있습니다. 
예를 들어 자전거에 6개의 기어만 있는 경우 기어를 변경하는 메서드는 1보다 작거나 6보다 큰 값을 거부할 수 있습니다.

코드를 개별 소프트웨어 개체로 번들링하면 다음과 같은 많은 이점이 있습니다.

1.모듈성: 개체의 소스 코드는 다른 개체의 소스 코드와 독립적으로 작성 및 유지 관리할 수 있습니다. 일단 생성된 객체는 시스템 내부에서 쉽게 전달할 수 있습니다.
2.정보 은폐: 개체의 메서드와만 상호 작용함으로써 내부 구현의 세부 사항이 외부 세계에 숨겨져 있습니다.
3.코드 재사용: 개체가 이미 존재하는 경우(아마도 다른 소프트웨어 개발자가 작성한 경우) 프로그램에서 해당 개체를 사용할 수 있습니다. 
  이를 통해 전문가는 복잡한 작업별 개체를 구현/테스트/디버그할 수 있으며, 이 개체를 자신의 코드에서 실행하도록 신뢰할 수 있습니다.
4.플러그인 가능성 및 디버깅 용이성: 특정 개체에 문제가 있는 것으로 판명되면 애플리케이션에서 해당 개체를 제거하고 대체 개체로 다른 개체를 
  연결하기만 하면 됩니다. 이것은 실제 세계에서 기계적 문제를 해결하는 것과 유사합니다. 볼트가 부러지면 전체 기계가 아니라 볼트를 교체합니다.
  
● 클래스(Class)란 무엇입니까?
